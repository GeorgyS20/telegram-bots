import const
import telebot
from telebot import types
# from telebot import apihelper

# apihelper.proxy = {'http':'http://109.70.189.56:48774'}

bot = telebot.TeleBot(const.TOKEN)

@bot.message_handler(content_types=["text"])
def send_welcome(message):
	markup_inline_main = types.InlineKeyboardMarkup(row_width=1)
	btn_can = types.InlineKeyboardButton('üíé –ß—Ç–æ —è —É–º–µ—é? üíé', callback_data='can')
	btn_work = types.InlineKeyboardButton('üíµ –ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å üíµ', callback_data='work')
	btn_friends = types.InlineKeyboardButton('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π üë•', "https://t.me/share/url?url=t.me/breadheadbot?start=" + str(message.from_user.id) + "&text=#—Ö–ª–µ–±—É—à–∫–∞—Ö–æ—á–µ—à—å?")
	btn_balance = types.InlineKeyboardButton('üí≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≤', callback_data='balance')

	markup_inline_main.add(btn_can, btn_work, btn_friends, btn_balance)

	bot.send_message(
		chat_id=message.chat.id, 
		text="*–ü—Ä–∏–≤–µ—Ç, "+ message.from_user.first_name + "!*\n–¢—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ª–∏–±–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º üí∏\n*–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ‚¨áÔ∏è*", 
		reply_markup=markup_inline_main,
		parse_mode = "Markdown"
	)

@bot.callback_query_handler(func=lambda call:True)
def call_back_main(call):
	if call.data == 'back': #–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
		markup_inline_main = types.InlineKeyboardMarkup(row_width=1)
		btn_can = types.InlineKeyboardButton('üíé –ß—Ç–æ —è —É–º–µ—é? üíé', callback_data='can')
		btn_work = types.InlineKeyboardButton('üíµ –ù–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å üíµ', callback_data='work')
		btn_friends = types.InlineKeyboardButton('üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π üë•', "https://t.me/share/url?url=t.me/breadheadbot?start=" + str(call.message.from_user.id) + "&text=#—Ö–ª–µ–±—É—à–∫–∞—Ö–æ—á–µ—à—å?")
		btn_balance = types.InlineKeyboardButton('üí≤ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å üí≤', callback_data='balance')

		markup_inline_main.add(btn_can, btn_work, btn_friends, btn_balance)

		bot.edit_message_text(
			chat_id=call.message.chat.id,
			message_id=call.message.message_id, 
			text="–¢—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è, –ª–∏–±–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º üí∏\n*–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∏–∂–µ‚¨áÔ∏è*", 
			reply_markup=markup_inline_main,
			parse_mode = "Markdown"
		)

	elif call.data == 'can': #–ö–Ω–æ–ø–∫–∞ —á—Ç–æ —è —É–º–µ—é
		keyboard = types.InlineKeyboardMarkup(row_width=1)

		back_button = types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='back')

		keyboard.add(back_button)

		bot.edit_message_text(
			chat_id=call.message.chat.id,
			message_id=call.message.message_id,
			text="_–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –±—É—Ö–∞–Ω–∫–∏ —Ö–ª–µ–±–∞ 30 —Ä—É–±–ª–µ–π - –∏–º–µ–Ω–Ω–æ —Å—Ç–æ–ª—å–∫–æ —è –≤—ã–ø–ª–∞—á–∏–≤–∞—é —Å–≤–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º –∑–∞ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!\n–°–∫–æ–ª—å–∫–æ —Ö–ª–µ–±–∞ —Ç—ã —Å–º–æ–∂–µ—à—å —É–Ω–µ—Å—Ç–∏? –ü—Ä–æ–≤–µ—Ä–∏–º?_\n*–¢–≤–æ—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:* t.me/breadheadbot?start=" + str(call.message.from_user.id),
			reply_markup=keyboard,
			parse_mode="Markdown"
		)

	elif call.data == 'work': #–ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
		keyboard = types.InlineKeyboardMarkup(row_width=1)

		back_button = types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='back')

		keyboard.add(back_button)

		bot.edit_message_text(
			chat_id=call.message.chat.id,
			message_id=call.message.message_id,
			text="*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µüòî*",
			reply_markup=keyboard,
			parse_mode="Markdown"
		)

	elif call.data == 'balance': #–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
		keyboard = types.InlineKeyboardMarkup(row_width=1)

		back_button = types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='back')

		keyboard.add(back_button)

		bot.edit_message_text(
			chat_id=call.message.chat.id,
			message_id=call.message.message_id,
			text="*–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µüòî*",
			reply_markup=keyboard,
			parse_mode="Markdown"
		)

	

# @bot.message_handler(commands=['start', 'help'])
# def send_welcome(message):
# 	bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –≠—Ç–∞–ª–æ–Ω-–ë–¢', reply_markup=markup_menu)

# @bot.message_handler(content_types=['text'])
# def answer_types(message):
# 	if '–û –Ω–∞—Å' in message.text:
# 		bot.send_message(message.chat.id, const.about_text)
# 		return
# 	elif '–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã' in message.text:
# 		bot.send_message(message.chat.id, const.pay_text)
# 		return
# 	elif '–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏' in message.text:
# 		bot.send_message(message.chat.id, const.delivery_text)
# 		return
# 	elif '–ü—É–Ω–∫—Ç—ã —Å–∞–º–æ–≤—ã–≤–æ–∑–∞' in message.text:
# 		bot.send_message(message.chat.id, const.pickup_text)
# 		return

bot.polling()