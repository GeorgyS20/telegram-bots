# -*- coding: utf-8 -*-
import logging
import ssl
import telebot
from telebot import types
from aiohttp import web
import const

API_TOKEN = const.TOKEN

WEBHOOK_HOST = 'ip/domen' #–ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ IP/domen –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
WEBHOOK_PORT = 8443 #–í–µ–±—Ö—É–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏–∑ –ø–æ—Ä—Ç–æ–≤: 8443, 443, 80, 88. –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç.
WEBHOOK_LISTEN = '0.0.0.0' #–ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö VPS —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π IP

WEBHOOK_SSL_CERT = './webhook_cert.pem' #–ü—É—Ç—å –¥–æ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.
WEBHOOK_SSL_PRIV = './webhook_pkey.pem' #–ü—É—Ç—å –¥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ SSL –∫–ª—é—á–∞.

#–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞, –µ–≥–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å (—Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π), –∫–æ–º–∞–Ω–¥—ã:
#openssl genrsa -out webhook_pkey.pem 2048
#openssl req -new -x509 -days 3650 -key webhook_pkey.pem -out webhook_cert.pem
#–í –ø–æ–ª–µ "Common Name (e.g. server FQDN or YOUR name)" —É–∫–∞–∂–∏—Ç–µ —Ç–∞–∫–æ–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ –∏ –≤ WEBHOOK_HOST

WEBHOOK_URL_BASE = "https://{}:{}".format(WEBHOOK_HOST, WEBHOOK_PORT)
WEBHOOK_URL_PATH = "/{}/".format(API_TOKEN)

logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

bot = telebot.TeleBot(API_TOKEN)

app = web.Application()

bot = telebot.TeleBot(API_TOKEN)

async def handle(request):
    if request.match_info.get('token') == bot.token:
        request_body_dict = await request.json()
        update = telebot.types.Update.de_json(request_body_dict)
        bot.process_new_updates([update])
        return web.Response()
    else:
        return web.Response(status=403)

app.router.add_post('/{token}/', handle)

@bot.message_handler(content_types=["text"])
def send_welcome(message):
    markup_inline_main = types.InlineKeyboardMarkup(row_width=1)
    btn_rus = types.InlineKeyboardButton('üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data='rus')
    btn_ukr = types.InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞', callback_data='ukr')
    btn_kz = types.InlineKeyboardButton('üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', callback_data='kz')

    markup_inline_main.add(btn_rus, btn_ukr, btn_kz)

    bot.send_message(
        chat_id=message.chat.id,
        text= "*–ü—Ä–∏–≤–µ—Ç, " + message.from_user.first_name + "!*"+ const.main_text,
        reply_markup=markup_inline_main,
        parse_mode="Markdown"
    )


@bot.callback_query_handler(func=lambda call: True)
def call_back_main(call):
    if call.data == 'back':  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        markup_inline_main = types.InlineKeyboardMarkup(row_width=1)
        btn_rus = types.InlineKeyboardButton('üá∑üá∫ –†–æ—Å—Å–∏—è', callback_data='rus')
        btn_ukr = types.InlineKeyboardButton('üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞', callback_data='ukr')
        btn_kz = types.InlineKeyboardButton('üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω', callback_data='kz')

        markup_inline_main.add(btn_rus, btn_ukr, btn_kz)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text= const.main_text,
            reply_markup=markup_inline_main,
            parse_mode="Markdown"
        )

    elif call.data == 'rus':  # –ö–Ω–æ–ø–∫–∞ RUS
        keyboard = types.InlineKeyboardMarkup()

        back_button = types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='back')
        sup_button = types.InlineKeyboardButton('‚Åâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', "https://t.me/@byware")
        zaim0_button = types.InlineKeyboardButton('üî• –ó–∞–π–º—ã –ø–æ–¥ 0%', callback_data='zaim')
        nojob_button = types.InlineKeyboardButton('üìì –ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–º –∏ —Å –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π', callback_data='nojob')
        firstzaim_button = types.InlineKeyboardButton('üÜï –ü–µ—Ä–≤—ã–π –∑–∞–π–º', callback_data='firstzaim')

        keyboard.row(zaim0_button)
        keyboard.row(nojob_button)
        keyboard.row(firstzaim_button)
        keyboard.row(back_button, sup_button)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=const.country_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    elif call.data == 'ukr':  # –ö–Ω–æ–ø–∫–∞ UKR
        keyboard = types.InlineKeyboardMarkup()

        back_button = types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='back')
        sup_button = types.InlineKeyboardButton('‚Åâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', "https://t.me/@byware")
        zaim0_button = types.InlineKeyboardButton('üî• –ó–∞–π–º—ã –ø–æ–¥ 0%', callback_data='zaim')
        nojob_button = types.InlineKeyboardButton('üìì –ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–º –∏ —Å –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π', callback_data='nojob')
        firstzaim_button = types.InlineKeyboardButton('üÜï –ü–µ—Ä–≤—ã–π –∑–∞–π–º', callback_data='firstzaim')

        keyboard.row(zaim0_button)
        keyboard.row(nojob_button)
        keyboard.row(firstzaim_button)
        keyboard.row(back_button, sup_button)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=const.country_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

    elif call.data == 'kz':  # –ö–Ω–æ–ø–∫–∞ KZ
        keyboard = types.InlineKeyboardMarkup()

        back_button = types.InlineKeyboardButton('‚è™ –ù–∞–∑–∞–¥', callback_data='back')
        sup_button = types.InlineKeyboardButton('‚Åâ –ü–æ–¥–¥–µ—Ä–∂–∫–∞', "https://t.me/@byware")
        zaim0_button = types.InlineKeyboardButton('üî• –ó–∞–π–º—ã –ø–æ–¥ 0%', callback_data='zaim')
        nojob_button = types.InlineKeyboardButton('üìì –ë–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–º –∏ —Å –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π', callback_data='nojob')
        firstzaim_button = types.InlineKeyboardButton('üÜï –ü–µ—Ä–≤—ã–π –∑–∞–π–º', callback_data='firstzaim')

        keyboard.row(zaim0_button)
        keyboard.row(nojob_button)
        keyboard.row(firstzaim_button)
        keyboard.row(back_button, sup_button)

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=const.country_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

bot.remove_webhook()

bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH,
                certificate=open(WEBHOOK_SSL_CERT, 'r'))

context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain(WEBHOOK_SSL_CERT, WEBHOOK_SSL_PRIV)

web.run_app(
    app,
    host=WEBHOOK_LISTEN,
    port=WEBHOOK_PORT,
    ssl_context=context,
)